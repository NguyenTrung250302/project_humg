import { defineStore } from "pinia";
import { ref } from "vue";
import axios from "axios";

export const useUserStore = defineStore("user", () => {
    const loading = ref(false);
    const error = ref(null);
    const user = ref(null);
    
    
    // truy·ªÅn token v√†o Bearear (token)
    const getAuthHeaders = () => {
        const token = localStorage.getItem('accessToken'); // L·∫•y token t·ª´ localStorage 
        return {
            Authorization: `Bearer ${token}`,
            accept: '*/*',
        };
    };
    
    
    // üõ† H√†m qu√™n m·∫≠t kh·∫©u
    const forgetPassword = async (email) => {
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("Email", email);
            
            const response = await axios.put(
                "https://localhost:7244/api/Controller_Authenic/Forget_Password",
                formData,
                {
                    headers: { "Content-Type": "multipart/form-data" },
                }
            );
            
            if (response.data.status === 200) {
                return { success: true, message: response.data.message || "Ki·ªÉm tra email c·ªßa b·∫°n ƒë·ªÉ l·∫•y l·∫°i m·∫≠t kh·∫©u!" };
            } else {
                return { success: false, message: response.data.message || "Qu√™n m·∫≠t kh·∫©u th·∫•t b·∫°i!" };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    
    const activatePassword = async (email, code) => {
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("code", code);
            
            const response = await axios.put(
                `https://localhost:7244/api/Controller_Authenic/Activate_Password?email=${encodeURIComponent(email)}`,
                formData,
                { headers: { "Content-Type": "multipart/form-data" } }
            );
            
            console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ API:", response.data);
            
            if (response.data.status === 200) {
                return { success: true, message: response.data.message || "K√≠ch ho·∫°t m·∫≠t kh·∫©u th√†nh c√¥ng!" };
            } else {
                return { success: false, message: response.data.message || "K√≠ch ho·∫°t m·∫≠t kh·∫©u th·∫•t b·∫°i!" };
            }
        } catch (err) {
            console.error("‚ùå L·ªói k√≠ch ho·∫°t m·∫≠t kh·∫©u:", err.response?.data || err.message);
            error.value = err.response?.data?.message || "K√≠ch ho·∫°t m·∫≠t kh·∫©u th·∫•t b·∫°i!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    
    
    // üõ† H√†m ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
    const register = async (username, maSV, password, email, fullName) => {
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("Username", username);
            formData.append("MaSV", maSV);
            formData.append("Password", password);
            formData.append("Email", email);
            formData.append("FullName", fullName);
            
            const response = await axios.post(
                "https://localhost:7244/api/Controller_Authenic/Register",
                formData,
                {
                    headers: { "Content-Type": "multipart/form-data" },
                }
            );
            
            if (response.data.status === 200) {
                return { success: true, message: response.data.message || "ƒêƒÉng k√≠ th√†nh c√¥ng!" };
            } else {
                return { success: false, message: response.data.message || "ƒêƒÉng k√≠ th·∫•t b·∫°i!" };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    
    
    const activateAccount = async (email, otp) => {
        if (!otp || otp.length !== 6) {
            return { success: false, message: "Vui l√≤ng nh·∫≠p ƒë√∫ng 6 ch·ªØ s·ªë OTP!" };
        }
        
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("Opt", otp);
            
            const response = await axios.put(
                `https://localhost:7244/api/Controller_Authenic/Active_Account?email=${encodeURIComponent(email)}`,
                formData,
                { headers: { "Content-Type": "multipart/form-data" } }
            );
            
            if (response.data.status === 200) {
                return { success: true, message: response.data.message || "K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng!" };
            } else {
                return { success: false, message: response.data.message || "K√≠ch ho·∫°t t√†i kho·∫£n th·∫•t b·∫°i!" };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "K√≠ch ho·∫°t t√†i kho·∫£n th·∫•t b·∫°i!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    
    
    // üõ† H√†m ƒëƒÉng nh·∫≠p
    const login = async (username, password) => {
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("Username", username);
            formData.append("Password", password);
            
            const response = await axios.post(
                "https://localhost:7244/api/Controller_Authenic/Login",
                formData,
                {
                    headers: { "Content-Type": "multipart/form-data" },
                }
            );
            
            if (response.data.status === 200 && response.data.data) {
                localStorage.setItem("accessToken", response.data.data.accessToken);
                user.value = response.data.data;
                
                return { success: true, message: response.data.message || "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!" };
            } else {
                return { success: false, message: response.data.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!" };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    

    const logout = () => {
        localStorage.removeItem("accessToken");
        memberInfo.value = null;
    }
    
    const memberInfo = ref(null); 
    const getMemberInfo = async () => {
        loading.value = true;
        error.value = null;
        
        try {
            const response = await axios.get(
                "https://localhost:7244/api/Controller_MemberInfo/Get_Menber_Info",
                { headers: getAuthHeaders() } 
            );
            console.log(response.data);
            
            if (response.data.status === 200) {
                memberInfo.value = response.data.data; 
                return { success: true, message: response.data.message };
            } else {
                return { success: false, message: response.data.message || "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!" };
            }
            
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };

    
    const changePassword = async (password, newpassword, renewpassword) => {
        loading.value = true;
        error.value = null;
    
        try {
            const formData = new FormData();
            formData.append("Password", password);
            formData.append("newpassword", newpassword);
            formData.append("renewpassword", renewpassword);
    
            const response = await axios.put(
                "https://localhost:7244/api/Controller_Authenic/Change_Password", 
                formData,
                { 
                    headers: {
                        ...getAuthHeaders(),
                        "Content-Type": "multipart/form-data"
                    } 
                }
            );
            console.log(response.data);
    
            if (response.data.status === 200) {
                return { success: true, message: response.data.message };
            } else {
                return { success: false, message: response.data.message };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };


    const updateProfile = async (
        { politicalTheory, nation, birthdate, religion, dateOfJoining, phoneNumber, classValue, fullName, placeOfJoining }) => {
        loading.value = true;
        error.value = null;
    
        try {
            const formData = new FormData();
    
            // Ch·ªâ th√™m v√†o FormData n·∫øu gi√° tr·ªã kh√¥ng null ho·∫∑c undefined
            if (politicalTheory) formData.append('PoliticalTheory', politicalTheory);
            if (nation) formData.append('Nation', nation);
            if (birthdate) formData.append('Birthdate', birthdate);
            if (religion) formData.append('Religion', religion);
            if (dateOfJoining) formData.append('DateOfJoining', dateOfJoining);
            if (phoneNumber) formData.append('PhoneNumber', phoneNumber);
            if (classValue) formData.append('Class', classValue);
            if (fullName) formData.append('FullName', fullName);
            if (placeOfJoining) formData.append('PlaceOfJoining', placeOfJoining);
    
            const response = await axios.put(
                "https://localhost:7244/api/Controller_MemberInfo/Update_member_info", 
                formData,
                { 
                    headers: {
                        ...getAuthHeaders(), 
                        "Content-Type": "multipart/form-data"
                    } 
                }
            );
            console.log(response.data);
            if (response.data.status === 200) {
                return { success: true, message: response.data.message };
            } else {
                return { success: false, message: response.data.message };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };
    
    
    // H√†m c·∫≠p nh·∫≠t ·∫£nh ng∆∞·ªùi d√πng
    const updateUserImage = async (urlAvatar) => {
        loading.value = true;
        error.value = null;
        
        try {
            const formData = new FormData();
            formData.append("UrlAvatar", urlAvatar);  
            
            const response = await axios.put(
                "https://localhost:7244/api/Controller_MemberInfo/Update_user_img", 
                formData,
                { 
                    headers: {
                        ...getAuthHeaders(),
                        "Content-Type": "multipart/form-data"
                    } 
                }
            );
            
            console.log(response.data);
            
            if (response.data.status === 200) {
                return { success: true, message: response.data.message || "C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng!" };
            } else {
                return { success: false, message: response.data.message || "C·∫≠p nh·∫≠t ·∫£nh th·∫•t b·∫°i!" };
            }
        } catch (err) {
            error.value = err.response?.data?.message || "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!";
            return { success: false, message: error.value };
        } finally {
            loading.value = false;
        }
    };

    
    return { 
        loading, 
        error,
        user,
        register,
        activateAccount,
        login,
        logout,
        forgetPassword, 
        activatePassword,
        memberInfo,
        getMemberInfo,
        changePassword,
        updateProfile,
        updateUserImage,
    };
});
